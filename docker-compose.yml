services:
  db:
    image: mysql
    environment:
      MYSQL_RANDOM_ROOT_PASSWORD: 1
      MYSQL_USER: ray
      MYSQL_PASSWORD: password
      MYSQL_DATABASE: traffic
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "ray", "-ppassword"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s

  zookeeper:
    image: wurstmeister/zookeeper
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc -w 2 localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - zookeeper-data:/data

  kafka:
    image: wurstmeister/kafka
    command: >
      bash -c "rm -rf /kafka/kafka-logs/meta.properties && start-kafka.sh"
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1"
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /kafka/kafka-logs
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_BROKER_ID: 1
    volumes:
      - ./data/kafka:/kafka/kafka-logs
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kafka-entrypoint.sh:/kafka-entrypoint.sh
    depends_on:
      zookeeper:
        condition: service_healthy

    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list | grep -w events"]
      interval: 60s
      timeout: 60s
      retries: 10
      start_period: 60s

  receiver:
    build:
      context: .
      dockerfile: receiver/Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SERVICE_NAME=receiver
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    depends_on:
      kafka:
        condition: service_healthy


  storage:
    build:
      context: .
      dockerfile: storage/Dockerfile
    ports:
      - "8090:8090"
    environment:
      - SERVICE_NAME=storage
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy

  processing:
    build:
      context: .
      dockerfile: processing/Dockerfile
    ports:
      - "8100:8100"
    environment:
      - SERVICE_NAME=processing
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
      - ./data/processing:/app/data
    depends_on:
      - storage

  analyzer:
    build:
      context: .
      dockerfile: analyzer/Dockerfile
    ports:
      - "8110:8110"
    environment:
      - SERVICE_NAME=analyzer
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    depends_on:
      kafka:
        condition: service_healthy

volumes:
  mysql_data:
  zookeeper-data:
